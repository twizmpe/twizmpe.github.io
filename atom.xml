<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://twizmpe.github.io</id>
    <title>twizmpe</title>
    <updated>2020-07-04T10:14:38.621Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://twizmpe.github.io"/>
    <link rel="self" href="https://twizmpe.github.io/atom.xml"/>
    <subtitle>菜鸟在学习</subtitle>
    <logo>https://twizmpe.github.io/images/avatar.png</logo>
    <icon>https://twizmpe.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, twizmpe</rights>
    <entry>
        <title type="html"><![CDATA[reflection和type introspection]]></title>
        <id>https://twizmpe.github.io/post/reflection-he-type-introspection/</id>
        <link href="https://twizmpe.github.io/post/reflection-he-type-introspection/">
        </link>
        <updated>2020-07-04T09:43:04.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>内省(type introspection)<sup><a href="https://zh.wikipedia.org/wiki/%E5%86%85%E7%9C%81_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">[1]</a></sup>是指计算机程序在运行时（Run time）检查对象（Object）类型的一种能力，通常也可以称作运行时类型检查。一些编程语言如C++、Java、Ruby、PHP、Objective-C、Perl等等具有这种特性。</li>
<li>反射机制<sup><a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">[2]</a></sup>不仅包括要能在运行时对程序自身信息进行检测，还要求程序能进一步根据这些信息改变程序状态或结构。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAVA学习]]></title>
        <id>https://twizmpe.github.io/post/java-xue-xi/</id>
        <link href="https://twizmpe.github.io/post/java-xue-xi/">
        </link>
        <updated>2020-07-03T11:36:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="泛型">泛型</h2>
<ul>
<li>即‘参数化类型’，java虚拟机在编译阶段进行去泛型化，在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。因此只要在编译时期不存在类型转换问题，那么运行时期就不会抛出ClassCastException异常。</li>
<li>泛型包含知识点
<ul>
<li>泛型类</li>
<li>泛型方法</li>
<li>类型通配符<code>?</code>
<ul>
<li>能调对象与类型无关的方法，不能调用对象与类型有关的方法。</li>
<li>设置通配符上限<code>&lt;? extends T&gt;</code>、设置通配符下限<code>&lt;? super T&gt;</code>。</li>
<li>上下限原则PECS(Producer Extends Consumer Super)
<ul>
<li>泛型读取<code>&lt;? extends T&gt;</code>--------&gt;Producer Extends</li>
<li>泛型写入<code>&lt;? super T&gt;</code>--------&gt;Consumer Super</li>
</ul>
</li>
</ul>
</li>
<li>泛型擦除
<ul>
<li>java虚拟机在编译阶段进行去泛型化。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="注解">注解</h2>
<h3 id="suppresswarningsrawtypes">@SuppressWarnings(&quot;rawtypes&quot;)</h3>
<ul>
<li>传参时也要传递带泛型的参数警告去除</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JeeSite4 随笔]]></title>
        <id>https://twizmpe.github.io/post/jeesite4/</id>
        <link href="https://twizmpe.github.io/post/jeesite4/">
        </link>
        <updated>2020-07-03T06:37:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="apache-commons-beanutils-propertyutils">Apache Commons Beanutils  Propertyutils</h3>
<ul>
<li>javaBean设计准则
<ul>
<li>1必须提供无参构造器</li>
<li>2类中属性必须私有化（private）</li>
<li>3类中提供公共的getter和setter方法</li>
</ul>
</li>
</ul>
<h4 id="beanutils">Beanutils</h4>
<ul>
<li><code>Apache Commons</code>包下的<code>Beanutils</code>是基于JDK的<code>java.beans</code>包实现。<code>Beanutils</code>按照javaBean的设计准则进行实现。使用java的反射实现。</li>
<li>常用方法</li>
</ul>
<pre><code class="language-java">// 把map里面的值放入bean中
public void populate (Object bean, Map map)
//复制
public static Object cloneBean(Object bean) {}
//把Bean的属性值放入到一个Map里面
public static Map&lt;String, String&gt; describe(Object bean){}
</code></pre>
<h4 id="propertyutils">Propertyutils</h4>
<ul>
<li><code>Beanutils</code>下的<code>PropertyUtils</code>能够通过<code>get</code>、<code>set</code>方法进行访问。<a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/overview-summary.html">doc文档</a>
<ul>
<li>基本数据类型：
<ul>
<li>PropertyUtils.getSimpleProperty(Object, String)</li>
<li>PropertyUtils.setSimpleProperty(Object, String, Object)</li>
</ul>
</li>
<li>集合list、数组类型
<ul>
<li>PropertyUtils.getIndexedProperty(Object, String)</li>
<li>PropertyUtils.getIndexedProperty(Object, String, int)</li>
<li>PropertyUtils.setIndexedProperty(Object, String, Object)</li>
<li>PropertyUtils.setIndexedProperty(Object, String, int, Object)</li>
</ul>
</li>
<li>Map映射类型
<ul>
<li>PropertyUtils.getMappedProperty(Object, String)</li>
<li>PropertyUtils.getMappedProperty(Object, String, String)</li>
<li>PropertyUtils.setMappedProperty(Object, String, Object)</li>
<li>PropertyUtils.setMappedProperty(Object, String, String, Object)</li>
</ul>
</li>
<li>嵌套类型
<ul>
<li>PropertyUtils.getNestedProperty(Object, String)</li>
<li>PropertyUtils.setNestedProperty(Object, String, Object)</li>
</ul>
</li>
<li>通用方法
<ul>
<li>PropertyUtils.getProperty(Object, String)</li>
<li>PropertyUtils.setProperty(Object, String, Object)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="排序">排序</h4>
<pre><code class="language-java">/**
  * 本地列表排序
  * @param list 需要排序的列表
  * @param orderBy 排序的键值（如：id desc）
  * @author ThinkGem
  */
  public static &lt;T&gt; List&lt;T&gt; listOrderBy(List&lt;T&gt; list, String orderBy){
      if (list != null &amp;&amp; StringUtils.isNotBlank(orderBy)){
          final String[] ss = orderBy.trim().split(&quot; &quot;);
          if (ss != null){
              final String t = ss.length==2 ? ss[1] : &quot;asc&quot;;
              Collections.sort(list, new Comparator&lt;T&gt;() {
                  @Override
                  public int compare(T o1, T o2) {
                      String s1 = StringUtils.EMPTY, s2 = StringUtils.EMPTY;
                      if (o1 instanceof Map){
                          s1 = ObjectUtils.toString(((Map)o1).get(ss[0]));
                          s2 = ObjectUtils.toString(((Map)o2).get(ss[0]));
                      }else{
                          s1 = ObjectUtils.toString(ReflectUtils.invokeGetter(o1, ss[0]));
                          s2 = ObjectUtils.toString(ReflectUtils.invokeGetter(o2, ss[0]));
                      }
                      if (&quot;asc&quot;.equalsIgnoreCase(t)){
                          return s1.compareTo(s2);
                      }else{
                          return s2.compareTo(s1);
                      }
                  }
              });
          }
      }
      return list;
  }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JeeSite4 编解码]]></title>
        <id>https://twizmpe.github.io/post/jeesite4-common/</id>
        <link href="https://twizmpe.github.io/post/jeesite4-common/">
        </link>
        <updated>2020-07-02T09:51:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="主要工具类">主要工具类</h3>
<ul>
<li><code>EncodeUtils</code>类包含
<ul>
<li>1.<code>Commons-Codec</code>的 hex/base64 编码</li>
<li>2.自制的base62 编码</li>
<li>3.<code>Commons-Lang</code>的xml/html escape</li>
<li>4.JDK提供的URLEncoder</li>
<li>5.XSS 非法字符过滤</li>
<li>6.SQL过滤</li>
</ul>
</li>
<li><code>DigestUtils</code>类
<ul>
<li><a href="https://www.cnblogs.com/androidsuperman/p/10296668.html"><code>java.security.MessageDigest</code></a>实现信息摘要算法的功能，如 MD5 或 SHA 算法。信息摘要是安全的单向哈希函数，它接收任意大小的数据，输出固定长度的哈希值。</li>
</ul>
</li>
</ul>
<h4 id="aes简介">AES简介</h4>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86">AES</a>(Advanced Encryption Standard)基于Rijndael加密法，通过AES加密函数，使用明文和密钥生成密码。严格地说，AES和Rijndael加密法并不完全一样（虽然在实际应用中两者可以互换），因为Rijndael加密法可以支持更大范围的区块和密钥长度：AES的区块长度固定为128比特，密钥长度则可以是128，192或256比特；而Rijndael使用的密钥和区块长度均可以是128，192或256比特。加密过程中使用的密钥是由Rijndael密钥生成方案产生。</li>
<li>AES加密过程是在一个4×4的字节矩阵上运作，经过多轮AES加密，每轮AES加密分为四个步骤：
<ul>
<li>AddRoundKey—矩阵中的每一个字节都与该次回合密钥（round key）做XOR运算；每个子密钥由密钥生成方案产生。</li>
<li>SubBytes—透过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。</li>
<li>ShiftRows—将矩阵中的每个横列进行循环式移位。</li>
<li>MixColumns—为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略MixColumns步骤，而以另一个AddRoundKey取代。</li>
</ul>
</li>
</ul>
<h4 id="des加密算法">DES加密算法</h4>
<ul>
<li>数据加密标准（英语：Data Encryption Standard，缩写为 <a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96">DES</a>）是一种对称密钥加密块密码算法，1976年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），随后在国际上广泛流传开来。它基于使用56位密钥的对称算法。这个算法因为包含一些机密设计元素，相对短的密钥长度以及怀疑内含美国国家安全局（NSA）的后门而在开始时有争议，DES因此受到了强烈的学院派式的审查，并以此推动了现代的块密码及其密码分析的发展。DES现在已经不是一种安全的加密方法，主要因为它使用的56位密钥过短。</li>
</ul>
<h4 id="base64">BASE64</h4>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/Base64">BASE64</a>是一种基于64个可打印字符来表示二进制数据的表示方法。每6个比特为一个单元，对应某个可打印字符。3个字节相当于24个比特，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。</li>
</ul>
<h4 id="hex">HEX</h4>
<ul>
<li>16进制编解码</li>
</ul>
<h4 id="md5">MD5</h4>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/MD5">MD5</a>消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。</li>
<li>MD5是输入不定长度信息，输出固定长度128-bits的算法。经过程序流程，生成四个32位数据，最后联合起来成为一个128-bits散列。基本方式为，求余、取余、调整长度、与链接变量进行循环运算。得出结果。</li>
</ul>
<h4 id="sha-1">SHA-1</h4>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/SHA-1">SHA-1</a>（英语：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种密码散列函数，美国国家安全局设计，并由美国国家标准技术研究所（NIST）发布为联邦数据处理标准（FIPS）。SHA-1可以生成一个被称为消息摘要的160位（20字节）散列值，散列值通常的呈现形式为40个十六进制数。</li>
</ul>
<h4 id="xss">XSS</h4>
<ul>
<li>跨站脚本（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。</li>
<li>攻击手段和谜底
<ul>
<li>盗用cookie，获取敏感信息。</li>
<li>利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。</li>
<li>利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作。</li>
<li>利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</li>
<li>在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DoS攻击的效果。</li>
</ul>
</li>
</ul>
<h5 id="如何防止xss美团">如何防止XSS（<a href="https://tech.meituan.com/2018/09/27/fe-security.html">美团</a>）</h5>
<ul>
<li>XSS分类
<ul>
<li>存储型
<ul>
<li>攻击者将恶意代码提交到目标网站的数据库中。</li>
<li>用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。<br>
这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。</li>
</ul>
</li>
<li>反射型
<ul>
<li>攻击者构造出特殊的 URL，其中包含恶意代码。</li>
<li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。<br>
反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。<br>
反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。</li>
</ul>
</li>
<li>DOM 型
<ul>
<li>攻击者构造出特殊的 URL，其中包含恶意代码。</li>
<li>用户打开带有恶意代码的 URL。</li>
<li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。<br>
DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。</li>
</ul>
</li>
</ul>
</li>
<li>XSS预防
<ul>
<li>输入过滤
<ul>
<li>防止 HTML 中出现注入。</li>
<li>防止 JavaScript 执行时，执行恶意代码。</li>
</ul>
</li>
<li>存储型和反射型 XSS 攻击
<ul>
<li>纯前端渲染</li>
<li>HTML转义</li>
</ul>
</li>
<li>DOM 型 XSS 攻击
<ul>
<li>在使用 .innerHTML、.outerHTML、document.write() 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 .textContent、.setAttribute() 等。</li>
</ul>
</li>
<li>常用准则
<ul>
<li>禁止加载外域代码，防止复杂的攻击逻辑。</li>
<li>禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。</li>
<li>禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）。</li>
<li>禁止未授权的脚本执行（新特性，Google Map 移动版在使用）。</li>
<li>合理使用上报可以及时发现 XSS，利于尽快修复问题。</li>
</ul>
</li>
</ul>
</li>
<li>包中解决方法
<ul>
<li>1.使用<code>org.apache.commons.text.StringEscapeUtils</code>工具类对<code>xml</code>以及<code>HTML</code>进行转义编解码，对特殊字符如&lt;&gt;&quot; ' &amp; 转义。</li>
<li>2.使用设计的<code>xssFilter</code>过滤关键词。</li>
<li>3.使用设计的<code>sqlFilter</code>过滤<code>SQL</code>关键词。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
</feed>